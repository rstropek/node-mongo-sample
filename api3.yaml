openapi: 3.0.0
info:
  title: Event Management
  description: This is a sample API for event management
  termsOfService: https://my-events-demo.com/eula
  contact:
    name: API Support
    url: https://my-events-demo.com/support
    email: support@my-events-demo.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
servers:
# Note the use of URL variables
- url: https://{tenant-id}.my-events-demo.com/{version}/api
  description: The production API server
  variables:
    tenant:
      description: Register for a my-events-demo account to get your tenant ID
      default: ''
    version:
      enum:
        - rc
        - v1
      default: v1
- url: http://localhost:1337/api
  description: The development API server
paths:
  /events:
    get:
      operationId: GetEvents
      summary: Returns all events
      # Note the use of tags
      tags:
      - Events
      description: This API returns a list of events. It supports getting only future events and events in the past, too.
      # Note the link to external documentation
      externalDocs:
        description: Conceptual documentation about events
        url: https://my-events-demo.com/docs/overview/events
      parameters:
      - name: past
        in: query
        # Note markdown in description
        description: Indicates whether events from the past should be returned. If not specified, past events are **not** returned
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: A list of events
          content:
            application/json:
              schema:
                type: array
                items:
                  # Note reference to reusable component
                  $ref: '#/components/schemas/event'
        '500':
          # Note reference to reusable component
          $ref: '#/components/responses/errorResponse'
    post:
      operationId: AddEvent
      summary: Adds an event
      tags:
      - Events
      # Note specification of request body
      requestBody:
        description: Data of the new event
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newEvent'
      responses:
        '201':
          description: Added event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
          # Note the specification of response header
          headers:
            Location:
              description: URL where to get details of the created event
              schema:
                type: string
          # Note definition of a link
          links:
            event:
              # the target link operationId
              operationId: GetEvent
              parameters:
                # get the `id` field from the request path parameter named `id`
                _id: $response.body#/_id
        '400':
          description: Invalid event data in request body
          content:
            text/html:
              schema:
                type: string
                description: Cause of the error
                example: Mandatory member 'location' is missing.
        '500':
          # Note reference to reusable component
          $ref: '#/components/responses/errorResponse'
  /events/{_id}:
    get:
      operationId: GetEvent
      summary: Returns a specific event
      tags:
      - Events
      parameters:
      - name: _id
        in: path
        description: ID of the event to load
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event'
        '404':
          description: Event with the specified it not found
        '500':
          # Note reference to reusable component
          $ref: '#/components/responses/errorResponse'
  /events/{_id}/registrations:
    post:
      operationId: AddEventRegistration
      summary: Adds a registration for an event
      tags:
      - Registrations
      requestBody:
        description: Data of the registration
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/newRegistration'
      responses:
        '201':
          description: Added registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registration'
          headers:
            Location:
              description: URL where to get details of the created registration
              schema:
                type: string
          links:
            event:
              operationId: GetEvent
              parameters:
                _id: $response.body#/event/id
        '400':
          description: Invalid registration data in request body
          content:
            text/html:
              schema:
                type: string
                description: Cause of the error
                example: Missing member 'participant'
        '404':
          description: Specified event ID not found
        '500':
          $ref: '#/components/responses/errorResponse'
    get:
      operationId: GetEventRegistrations
      summary: Gets registrations for an event
      tags:
      - Registrations
      responses:
        '200':
          description: Registrations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/registration'
        '500':
          $ref: '#/components/responses/errorResponse'
    # Note global parameters for all operations of this path
    parameters:
    - name: _id
      in: path
      description: ID of the event for the registration
      required: true
      schema:
        type: string
  /participants/{participantId}/checkin/{eventId}:
    post:
      operationId: CheckIn
      summary: Checks in a participant for an event
      tags:
      - Participants
      parameters:
      - name: participantId
        in: path
        description: ID of the participant
        required: true
        schema:
          type: string
      - name: eventId
        in: path
        description: ID of the event
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Added registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  newCheckin:
                    type: boolean
                    description: Indicates whether this has been a new check-in. False if the participant was already checked in for the event.
                  givenName:
                    type: string
                  numberOfCheckins:
                    type: integer
                    format: int32
                    description: Total number of checkins of the participant
        '404':
          description: Event or participant with specified ID not found
        '500':
          $ref: '#/components/responses/errorResponse'
components:
  responses:
    errorResponse:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
  schemas:
    newEvent:
      type: object
      required:
      - date
      - location
      properties:
        date:
          type: string
          format: date-time
          description: Date and time of the event start
        location:
          type: string
          minLength: 10
          maxLength: 250
        eventbriteId:
          type: string
          # Note markdown in description
          description: ID of the event in [Eventbrite](https://www.eventbrite.de/)
        quantitySold:
          type: integer
          format: int32
          minimum: 0
        quantityTotal:
          type: integer
          format: int32
          minimum: 0
        url:
          type: string
          # Note readOnly (present in responses, not in requests)
          readOnly: true
          description: URL for getting event details
    event:
      # Note that event is based on newEvent
      allOf:
      - $ref: '#/components/schemas/newEvent'
      - required:
        - _id
      - properties:
          _id:
            type: string
            description: Unique identifier or the event
            # Note regex (in this case: MongoDB ID)
            pattern: '^[a-f\d]{24}$'
    newRegistration:
      type: object
      required:
      - participant
      properties:
        participant:
          # Note nested schema definition
          type: object
          required:
          - givenName
          - familyName
          properties:
            givenName:
              type: string
            familyName:
              type: string
            email:
              type: string
              format: email
            googleSubject:
              type: string
              description: ID of the associated Google account ([more about auth with Google...](https://developers.google.com/identity/protocols/OAuth2))
            eventbriteId:
              type: string
              description: ID of the participant in [Eventbrite](https://www.eventbrite.de/)
            yearOfBirth:
              type: integer
              format: int32
            gender:
              type: string
              enum:
              - Male
              - Female
        needsComputer:
          type: boolean
          description: Indicates whether the participant needs a rental computer. Default value is false.
        checkedin: 
          type: boolean
          description: Indicates whether the participant should be checked in during registration. Default value is false.
    registration:
      type: object
      required:
      - _id
      - event
      - participant
      - registered
      properties:
        _id:
          type: string
          description: Unique identifier of the registration
          pattern: '^[a-f\d]{24}$'
        event:
          type: object
          required:
          - id
          - date
          properties:
            id:
              type: string
              description: Unique identifier of the event
              pattern: '^[a-f\d]{24}$'
            date:
              type: string
              format: date-time
              description: Date and time of the event start
        participant:
          type: object
          required:
          - id
          - givenName
          - familyName
          properties:
            id:
              type: string
              description: Unique identifier of the participant
              pattern: '^[a-f\d]{24}$'
            givenName:
              type: string
            familyName:
              type: string
        needsComputer:
          type: boolean
          description: Indicates whether the participant needs a rental computer. Default value is false.
        registered:
          type: boolean
          description: Indicates whether the participant is registered (can be false if participant has registered and unregistered afterwards)
        checkedin:
          type: boolean
          description: Indicates whether the participant has checked in for the event
    error:
      type: object
      required:
      - error
      properties:
        error:
          type: string
          description: Description of the error